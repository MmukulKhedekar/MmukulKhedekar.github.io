---
title: UIUCTF2023 Crypto Writeups
date: 2023-07-10 00:00:00 +0530
categories: [CTF]
tags: [cryptography]
math: true
---
I participated in UIUCTF2023 with the team <a href="https://ctftime.org/team/16691/">InfoSecIITR</a>. We finished $37$th out of the $815$ teams that participated in this contest. I was able to do $4$ cryptography challenges as a part of my contribution to our team on this contest. The other two cryptography challenges were done by my team-mates, nevertheless I'll explain the writeups for all $6$ of them in this blogpost. 
## Three-Time Pad [Crypto]
```
"We've been monitoring our adversaries' communication channels, but they encrypt their data with XOR one-time pads! However, we hear rumors that they're reusing the pads...\n\nEnclosed are three encrypted messages. Our mole overheard the plaintext of message 2. Given this information, can you break the enemy's encryption and get the plaintext of the other messages?"
```

We are then provided with the attachments to files <a href="/ignore/uiu/c1">c1</a>
, <a href="/ignore/uiu/c2">c2</a>, <a href="/ignore/uiu/c3">c3</a>, <a href="/ignore/uiu/p2">p2</a>.

### Solution
As the challenge statement states, we are provided with three ciphertexts and a plaintext. The encryption scheme performs xor of hidden key and plaintext to obtain the ciphertext. Since, we know the ciphertext and the corresponding plaintext, we can recover the hidden key using the property that $ x \oplus x = 0$. Then we reuse that hidden key to decrypt other ciphertexts. 
```python
from pwn import *

c1 = open("c1","rb").read()
c2 = open("c2","rb").read()
c3 = open("c3","rb").read()
p2 = "printed on flammable material so that spies could"

key = xor(c2,p2)

print(xor(key,c1))
print(xor(key,c2))
print(xor(key,c3))
``` 
```
b'before computers, one-time pads were sometimes\x1d\x96\xf7'
b'printed on flammable material so that spies could'
b'uiuctf{burn_3ach_k3y_aft3r_us1ng_1t}\xdbU(e5\x96S:\x1c\xa6\xe6>\x9f'
```
and there we have our flag 
```
uiuctf{burn_3ach_k3y_aft3r_us1ng_1t}
```
## At Home
```
Mom said we had food at home
```
and we are provided with <a href="/ignore/uiu2/chal.py">chal.py</a> and <a href="/ignore/uiu2/chal.txt">chal.txt</a>. 
### Solution
from the chal.txt file it felt as if this challenge implemented some RSA variant in disguise. but it worse than that. notice how the variable flag isn't much long in comparison to values like $n$. therefore, to retrieve the flag we can just compute $c \cdot e^{-1} \pmod{n}$ and convert into bytes to get the flag. 
```python
from Cryptodome.Util.number import *
e = 359050389152821553416139581503505347057925208560451864426634100333116560422313639260283981496824920089789497818520105189684311823250795520058111763310428202654439351922361722731557743640799254622423104811120692862884666323623693713
n = 26866112476805004406608209986673337296216833710860089901238432952384811714684404001885354052039112340209557226256650661186843726925958125334974412111471244462419577294051744141817411512295364953687829707132828973068538495834511391553765427956458757286710053986810998890293154443240352924460801124219510584689
c = 67743374462448582107440168513687520434594529331821740737396116407928111043815084665002104196754020530469360539253323738935708414363005373458782041955450278954348306401542374309788938720659206881893349940765268153223129964864641817170395527170138553388816095842842667443210645457879043383345869
x = (pow(e,-1,n)*c)%n
print(long_to_bytes(x))
```
```
b'uiuctf{W3_hav3_R5A_@_h0m3}'
```
and there we have our flag 
```
uiuctf{W3_hav3_R5A_@_h0m3}
```

## Group Project
```
In any good project, you split the work into smaller tasks...
nc group.chal.uiuc.tf 1337
```
and we are provided with <a href="/ignore/uiu3/chal.py">chal.py</a>. 
### Solution
The challenge gives us a freedom to choose the exponent for calculation of $S$. Everytime we connect to their remote port, we are provided with renewed values of $g$, $A$ and $p$ that are used for 

$$ 
A = g^{a} \pmod {p}
$$

where $a$ is a random natural number chosen smaller than $p-1$. The calculation of $S$ is done by choosing a similar random natural number smaller than $p-1$ and doing

$$
S = \left(g ^{ab}\right)^k \pmod{p}
$$

a key corresponding to the md5 hashvalue of the variable $S$ is then used for AES Encryption in ECB mode of the flag and the encrypted value is provided to us. this encryption can be reversed if we get the key. The key value seems dependent on the variable $S$. There are also restrictions on some values of $p$, specifically $p \neq 0, p-1$ to prevent the application of fermat's theorem. However, we can still choose $k$ to be any multiple of $(p-1)$ and this would force $S=1$ for which we know the md5-hashvalue and we can then decrypt the encrypted_flag. We'll choose $k=2\cdot \left( p-1 \right)$
```python
from Cryptodome.Cipher import AES
from Cryptodome.Util.number import *
from hashlib import md5
from Cryptodome.Util.Padding import pad
p = 114472013539228447112062407531612836419002913757508299227324922225196360365729450385394963669470106068659455445122091403847945485093307001413796222142804689129152564428276449745015123921635186724327067057821907457804045095717376446319136804891172131689062687595283052929948727605026226900110583661768773691543
print(2*(p-1))
c =  31383420538805400549021388790532797474095834602121474716358265812491198185235485912863164473747446452579209175051706
key = md5(long_to_bytes(1)).digest()
cipher = AES.new(key, AES.MODE_ECB)
print(cipher.decrypt(long_to_bytes(c)))
```
```
b"uiuctf{brut3f0rc3_a1n't_s0_b4d_aft3r_all!!11!!}\x01"
```
and there we have our flag 
```
uiuctf{brut3f0rc3_a1n't_s0_b4d_aft3r_all!!11!!}
```
## Morphing Time
```
The all revealing Oracle may be revealing a little too much...
nc morphing.chal.uiuc.tf 1337
```
and we are provided with <a href="/ignore/uiu4/chal.py">chal.py</a>
### Solution
In this challenge, we are given a prime $p$, a generator in $\mathbb{F}_p$ namely $g$ and for some random integer $a$ chosen between $(2,p-1)$, we let $A = g^a \pmod{p}$ and we are given $A$. The challenge then encrypts the plaintext $m$ using the following procedure: it choose a random integer $k$ in the range $(2,p-1)$ and we are returned $c_1,c_2$ where 

$$ 
    c_1 = g^k \pmod{p} 
$$ 

and,

$$
    c_2 = m\times A^k \pmod{p}
$$

we are then asked for two integers that must lie in the range $(1,p-1)$, namely $c_1', c_2'$. the following operation would be performed on these and we would be returned

$$
    m' = (c_2c_2')\times (c_1c_1')^{-a} \pmod{p}
$$

and then $m'$ would be returned. clearly the vulnerability lies in the freedom provided to us to choose the integers $c_1'$ and $c_2'$. how could we exploit this to our benefit? first let's replace $c_1, c_2$ and $A$ with other variables and remove variable dependencies

$$
    m' \equiv \left( mg^{ak}c_2'\right) \times \left(g^{k}c_1' \right)^{-a} \pmod{p} 
$$

this gets reduced to

$$
    m' \equiv mc_2' \left(c_1'\right)^{-a} \pmod{p}
$$

if we could eliminate $c_1'$ and $c_2'$ from the above modular equation, we would be left with just $m$ (which is the plaintext that we wanted to recover) and would consequently trick the oracle into returning the plaintext. we could carefully notice that sending $c_1' = g$ and $c_2' = A$ gives us what we wanted. 

```python
from Cryptodome.Util.number import *
g = 2
p = 7484095248834993502053839017358897823121997713226711587602410464678792331188769816995336914660546321514928192956117931449167231109702558978514881228824583
A = 6917015961753642834611222605655588360747543255315091129828984308581303900315724342097649061459590513250263027719947039428081218939947910182605895778151740
c1 = 4299533769027103644199438741010718257531573097277813736345760734743910971303741211886200160686471242418904447891956682529813940960729972961562800573960076
c2 = 2105852166495505806416415519734132568246748463139463201745419010844107581292456159795671195552446392323270108896540198582465523703753299926022624105858501
c1_ = g
c2_ = A
m = 4207564671745017061459002831657829961985417520046041547841180336049591837607722234018405874709347956760957
print(long_to_bytes(m))
```
```
b'uiuctf{h0m0m0rpi5sms_ar3_v3ry_fun!!11!!11!!}'
```
and there we have our flag 
```
uiuctf{h0m0m0rpi5sms_ar3_v3ry_fun!!11!!11!!}
```

## Group Projection
```
I gave you an easier project last time. This one is sure to break your grade!
nc group-projection.chal.uiuc.tf 1337
```
and we are provided with <a href="/ignore/uiu5/chal.py">chal.py</a>
### Solution

This is the same premise as that of <a href="https://mmukulkhedekar.github.io/posts/UIUCTF2023-Crypto/#group-project">this challenge</a>. The only difference is that they have included a check to ensure that $p$ lies in the range $(1,p-1)$. So we cannot force $S$ to a known value directly (or maybe we can?). we can clearly not send $k=p-1$ or $k=\left(\tfrac{p-1}{2}\right)$. however, observe that there's a very good possibility that the prime $p$ that's being generated is a prime $1 \pmod{4}$. hence we could raise and check if $g^{\left(\frac{p-1}{2}\right)} \equiv 1 \pmod{p}$ and $g^{\left(\frac{p-1}{4}\right)} \equiv -1 \pmod{p}$. In that case, $S$ is either $1$ or $p-1$ depending upon the parity of the exponent and we could carry out the same attack as earlier.

```python
    from Cryptodome.Util.number import *
p = 166148781020985221294132680009523800834589121124919305032714266631968961798080186243974990579721200182614250637975001874432118684806317020258413677591123161068984012238921153572976145044121814252498788396912731509392758997476296445135031886587123604634323870690196160521923821654368736437310472203674009193161
g = 2
print(pow(g,(p-1)//(2*2),p)) 
print((p-1)//4)
k = 41537195255246305323533170002380950208647280281229826258178566657992240449520046560993747644930300045653562659493750468608029671201579255064603419397780790267246003059730288393244036261030453563124697099228182877348189749369074111283757971646780901158580967672549040130480955413592184109327618050918502298290
c = 5677169294903304570406193585238148170997112417612901309773833814018777687659367605188095202509287134546053948372907672344681759282374753737141852466485477

from Cryptodome.Cipher import AES
from hashlib import md5
from Cryptodome.Util.Padding import pad
key = md5(long_to_bytes(p-1)).digest()
cipher = AES.new(key, AES.MODE_ECB)
print(cipher.decrypt(long_to_bytes(c)))
```
```python
166148781020985221294132680009523800834589121124919305032714266631968961798080186243974990579721200182614250637975001874432118684806317020258413677591123161068984012238921153572976145044121814252498788396912731509392758997476296445135031886587123604634323870690196160521923821654368736437310472203674009193160
41537195255246305323533170002380950208647280281229826258178566657992240449520046560993747644930300045653562659493750468608029671201579255064603419397780790267246003059730288393244036261030453563124697099228182877348189749369074111283757971646780901158580967672549040130480955413592184109327618050918502298290
b'uiuctf{brut3f0rc3_w0rk3d_b3f0r3_but_n0t_n0w!!11!!!}\r\r\r\r\r\r\r\r\r\r\r\r\r'
```
and there we have our flag
```
uiuctf{brut3f0rc3_w0rk3d_b3f0r3_but_n0t_n0w!!11!!!}
```

## Crack_the_safe
```
"I found this safe, but something about it seems a bit off - can you crack it?"
```
and we are provided with <a href="/ignore/uiu6/chal.py">chal.py</a>
### Solution 

In this challenge, we are given a prime $p$, a ciphertext $ct$ and we are given that 
decypting AES in ECB mode with a key $k$ would give us the flag. Also,


$$
c = 7^k \pmod{p}
$$

where the integer $c$ is known. 

```python
p = 4170887899225220949299992515778389605737976266979828742347
ct = bytes.fromhex("ae7d2e82a804a5a2dcbc5d5622c94b3e14f8c5a752a51326e42cda6d8efa4696")
def crack_safe(key):
    return pow(7, int.from_bytes(key, 'big'), p) == 0x49545b7d5204bd639e299bc265ca987fb4b949c461b33759
assert crack_safe(key) and AES.new(key,AES.MODE_ECB).decrypt(ct) == FLAG
```

so basically we need to compute the discrete logarithm of $7$ modulo $p$. we could compute the order of $p-1$ to check if $p$ is an unsafe prime (so that we could carry out pohlig-hellman's attack to compute the discrete logarithm) and it turns out not so smooth. here's the factorisation of $p-1$

$$ 
p-1 =  2 \cdot 19 \cdot 151 \cdot 577 \cdot 67061 \cdot 18279232319 \cdot 111543376699 \cdot 9213409941746658353293481
$$

the last prime factor is too big enough to carry out a normal pohlig-hellman. however, we could do it for the other remaning prime-factors. suppose neglecting the largest prime factor, the discrete logarithm turns out to be $x'$. then the required discrete logarithm is of the form

$$
    x = x' + k\times\left( \frac{p-1}{9213409941746658353293481}\right)
$$

where $k<9213409941746658353293481$. we could run a bruteforce
```python
for i in range(9213409941746658353293481):
    x = 444780066250058017668829040430952 + i*452697527364609267740158052564666
    if (h==pow(g,x,p)):
        print(x)
        break
```
and it surprisingly ends in a short duration with $k=446038$ and 

$$
x=201920744490721838622302286278878924260
$$

```python
from Cryptodome.Cipher import AES
from Cryptodome.Util.number import *
p = 4170887899225220949299992515778389605737976266979828742347
ct = bytes.fromhex("ae7d2e82a804a5a2dcbc5d5622c94b3e14f8c5a752a51326e42cda6d8efa4696")
def crack_safe(key):
    return pow(7, int.from_bytes(key, 'big'), p) == 0x49545b7d5204bd639e299bc265ca987fb4b949c461b33759
print(int(str("49545b7d5204bd639e299bc265ca987fb4b949c461b33759"),16))
k = 1798034623618994974454756356126246972179657041628028417881
key = long_to_bytes(201920744490721838622302286278878924260)
cipher = AES.new(key, AES.MODE_ECB)
print(cipher.decrypt(ct))
```
```python
1798034623618994974454756356126246972179657041628028417881
b'uiuctf{Dl0g_w/__UnS4F3__pR1Me5_}'
```
and here's our flag
```
uiuctf{Dl0g_w/__UnS4F3__pR1Me5_}
```